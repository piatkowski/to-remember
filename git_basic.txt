----------------
master ==> main
----------------

git init        - initialize repository

git status      -  status of Staging Area
git log         - log commits

git add file1 file2     - add files to Staging Area

git commit -m "Message"     - commit from Staging Area to Repository

git config --global user.email "adres@email.pl"
git config --global user.name "My Name"


git checkout 455af07a79f9c6410ec643fcbbbed17bfeda83a1   - checkout commit
git checkout master                                     - checkout latest commit in branch
git checkout branch-name        - switch to other branch

git branch                      - display available branches
git branch new-branch           - create new branch
git checkout -b new-branch      - create new branch and switch to that branch

git switch branch-name          - switch to other branch
git switch -c new-branch        - create new branch

Merging branches to master
-------------------------------
git checkout master     1. Go to master
git merge branch-name   2. Merge branch-name to master

HEAD - pointer to the latest commit in branch (checked out)
Detached HEAD - when checking out oler commit


git ls-files    - list files in commit


Removing, Restoting
---------------------

git rm filename             - delete file (in Staging Area)

git checkout filename.txt   - restore (unstaged file) modified files in Staging Area (restore to the HEAD commit)
git checkout .              - restore all unstanged files
git restore filename.txt    - restore unstaged files

git clean -dn               - remove untracked files (-n preview)
git clean -df               - force remove untracked files


git restore --staged filename.txt       - undo staged changes (after git add)
git checkout filename.txt      - restore file from HEAD

git reset - remove commits
-----------------------------
git reset --soft HEAD~1         - go back to the previous (-1) commit, files not deleted (SA and WD)
git reset HEAD~1                - as above, file deleted from Staging Area, but keep in WD
git reset --hard HEAD~1         - remove commit, files from Staging Area and from Working Directory

Remove branches 
--------------------
git branch -D branch-name       - force delete branch


.gitignore
-------------
*.log           - all *.log files
!test.log       - but not test.log
dir/*           - all directory with subfiles


GIT DEEP DIVE
-----------------

Stash - internal memory to commit unstaged changes
------

git stash                       - save unsaged changes to memory
git stash apply                 - bring back saved changes from stash
git stash apply 0               - go back to first stash
git stash list                  - list saved sashes
git stash push -m "Message"     - save to stash with message
git stash pop 0                 - bring back saved changes and delete from stash
git stash drop 0                - delete from stash
git stash clear                 - clear stash


Reflog  - restore lost data
------

git reflog                  - list changes from 30 days
git reset --hard b52f9f3    - reset to selected reflog hash



Merge types
------------
* Fast-Forward          [most used]
* Non Fast-Forward
    - recursive         [most used]
    - ours
    - octopus
    - subtree

Fast-Forward
-------------
Moves HEAD forward but does not create new commit
Works only when there is no additonal commits on master branch

master:     m.1 m.2         f.3 |
feature:    m.1 m.2 f.1 f.2 f.3 |

git switch master           - switch to Master branch
git merge feature           - merge feature to master

Other way - new commit for merging:
git merge --squash feature
git commit -m "merged feature branch"

Recursive Non-Fast-Forward
---------------------------

Used when additional commits in both master & feature branch after feature branch was created

git merge --no-ff feature-branch
--no-ff is optional

m.1 m.2 m.3     
     |
m.1 m.2 f.1 f.2 f.3

Conflicts
----------

git merge
git diff
git merge --abort


Tags
-----
git tag 1.0 commit_id
git tag                             - list Tags
git show 1.0
git checkout 1.0                    - checkout tag (detached HEAD)
git tag -d 1.0                      - remove tag
git tag -a 2.0 -m "Latest version"  - annotation




Git Remote
--------------

git remote add origin https://...
git push -u origin master  (set upstream co connect local and remote branch)

git branch -a   (list all branches \w remotes)
git branch -r   (list remote branches)

git ls-remote   (list branches from remote origin)

git fetch origin            (fetch data from remote repo)
git pull origin branch      (pull works if we have connected branches, use fetch first to get new branch from remote repo)

pull = fetch + merge


Local Tracking branch

git branch --track feature-remote  origin/feature-remote    (connect local and remote branch to track changes)

git branch -vv      (show local branches and theirs remote branches)


Git Cloning
-----------

git clone https://...

git branch -vv  (missing local tracking branches)

git branch --track origin/feature remotes/origin/feature (to add local tracking branch)


Remove remote branches
------------------------

git push origin --delete branch


Remove remote commit
---------------------

git reset --hard HEAD~1
git push --force origin master
